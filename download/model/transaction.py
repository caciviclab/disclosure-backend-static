""" Transactions """
from polars import Boolean, Float32, Int64, Utf8
from .base import BaseModel

DTYPES = {
    'filing_nid': Utf8,
    'Form_Type': Utf8,
    'Rec_Type': Utf8,
    'Tran_ID': Utf8,
    'cal_tran_type': Utf8,
    'Elect_Date': Utf8,
    'Entity_Cd': Utf8,
    'Tran_NamL': Utf8,
    'Tran_NamF': Utf8,
    'Tran_NamT': Utf8,
    'Tran_NamS': Utf8,
    'Tran_Adr1': Utf8,
    'Tran_Adr2': Utf8,
    'Tran_City': Utf8,
    'Tran_State': Utf8,
    'Tran_Zip4': Utf8,
    'Tran_Emp': Utf8,
    'Tran_Occ': Utf8,
    'Tran_Self': Boolean,
    'Tran_Type': Utf8,
    'Tran_Date': Utf8,
    'Tran_Date1': Utf8,
    'Tran_Amt1': Float32,
    'Tran_Amt2': Float32,
    'Tran_Dscr': Utf8,
    'Cmte_ID': Utf8,
    'Tres_NamL': Utf8,
    'Tres_NamF': Utf8,
    'Tres_NamT': Utf8,
    'Tres_NamS': Utf8,
    'Tres_Adr1': Utf8,
    'Tres_Adr2': Utf8,
    'Tres_City': Utf8,
    'Tres_State': Utf8,
    'Tres_Zip': Utf8,
    'Intr_NamL': Utf8,
    'Intr_NamF': Utf8,
    'Intr_NamT': Utf8,
    'Intr_NamS': Utf8,
    'Intr_Adr1': Utf8,
    'Intr_Adr2': Utf8,
    'Intr_City': Utf8,
    'Intr_State': Utf8,
    'Intr_Zip4': Utf8,
    'Intr_Emp': Utf8,
    'Intr_Occ': Utf8,
    'Intr_Self': Boolean,
    'Cand_NamL': Utf8,
    'Cand_NamF': Utf8,
    'Cand_NamT': Utf8,
    'Cand_NamS': Utf8,
    'tblDetlTran_Office_Cd': Utf8,
    'tblDetlTran_Offic_Dscr': Utf8,
    'tblCover_Office_Cd': Utf8,
    'tblCover_Offic_Dscr': Utf8,
    'Juris_Cd': Utf8,
    'Juris_Dscr': Utf8,
    'Dist_No': Utf8,
    'Off_S_H_Cd': Utf8,
    'Bal_Name': Utf8,
    'Bal_Num': Utf8,
    'Bal_Juris': Utf8,
    'Sup_Opp_Cd': Utf8,
    'Memo_Code': Utf8,
    'Memo_RefNo': Utf8,
    'BakRef_TID': Utf8,
    'XRef_SchNm': Utf8,
    'XRef_Match': Utf8,
    'Loan_Rate': Utf8,
    'Int_CmteId': Int64
}

class Transactions(BaseModel):
    """ A collection of transactions """
    def __init__(self, transactions):
        super().__init__([
            {
                'filing_nid': t['filingNid'], # This will be used to join to filings
                'BakRef_TID': (tran := t['transaction'])['bakRefTID'], # Walrus must come first
                'Bal_Num': tran['balNum'],
                'Bal_Juris': tran['balJuris'],
                'Bal_Name': tran['balName'],
                'cal_tran_type': tran['calTransactionType'],
                'Cand_NamL': tran['candNamL'],
                'Cand_NamF': tran['candNamF'],
                'Cand_NamT': tran['candNamT'],
                'Cand_NamS': tran['candNamS'],
                'Cmte_ID': tran['cmteId'],
                'Dist_No': tran['distNo'],
                'Elect_Date': tran['elecDate'],
                'Entity_Cd': tran['entityCd'],
                'Form_Type': tran['formType'],
                'Int_CmteId': tran['intCmteId'],
                'Intr_NamL': tran['intrNamL'],
                'Intr_NamF': tran['intrNamF'],
                'Intr_NamT': tran['intrNamT'],
                'Intr_NamS': tran['intrNamS'],
                'Intr_Adr1': tran['intrAdr1'],
                'Intr_Adr2': tran['intrAdr2'],
                'Intr_City': tran['intrCity'],
                'Intr_State': tran['intrST'],
                'Intr_Zip4': tran['intrZip4'],
                'Intr_Emp': tran['intrEmp'],
                'Intr_Occ': tran['intrOcc'],
                'Intr_Self': tran['intrSelf'],
                'Juris_Cd': tran['jurisCd'],
                'Juris_Dscr': tran['jurisDscr'],
                'Loan_Rate': tran['loanRate'],
                'Memo_Code': tran['memoCode'],
                'Memo_RefNo': tran['memoRefNo'],
                'Off_S_H_Cd': tran['offSHCd'],
                'Rec_Type': tran['recType'],
                'Sup_Opp_Cd': tran['supOppCd'],
                'tblDetlTran_Office_Cd': tran['officeCd'],
                'tblDetlTran_Offic_Dscr': tran['officeDscr'],
                'tblCover_Office_Cd': None,
                'tblCover_Offic_Dscr': None,
                'Tran_ID': tran['tranId'],
                'Tran_NamL': tran['tranNamL'],
                'Tran_NamF': tran['tranNamF'],
                'Tran_NamT': tran['tranNamT'],
                'Tran_NamS': tran['tranNamS'],
                'Tran_Adr1': tran['tranAdr1'],
                'Tran_Adr2': tran['tranAdr2'],
                'Tran_City': tran['tranCity'],
                'Tran_State': tran['tranST'],
                'Tran_Zip4': tran['tranZip4'],
                'Tran_Emp': tran['tranEmp'],
                'Tran_Occ': tran['tranOcc'],
                'Tran_Self': tran['tranSelf'],
                'Tran_Type': tran['tranType'],
                'Tran_Date': tran['tranDate'],
                'Tran_Date1': tran['tranDate1'],
                'Tran_Amt1': tran['tranAmt1'],
                'Tran_Amt2': tran['tranAmt2'],
                'Tran_Dscr': tran['tranDscr'],
                'Tres_NamL': tran['tresNamL'],
                'Tres_NamF': tran['tresNamF'],
                'Tres_NamT': tran['tresNamT'],
                'Tres_NamS': tran['tresNamS'],
                'Tres_Adr1': tran['tresAdr1'],
                'Tres_Adr2': tran['tresAdr2'],
                'Tres_City': tran['tresCity'],
                'Tres_State': tran['tresST'],
                'Tres_Zip': tran['tresZip4'],
                'XRef_SchNm': tran['xrefSchNum'],
                'XRef_Match': tran['xrefMatch']
            } for t in transactions
        ])

        self._dtypes = DTYPES
